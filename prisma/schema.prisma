generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(cuid())
  name                String
  email               String          @unique
  phone               String?
  password            String
  createdAt           DateTime        @default(now())
  admin               Boolean         @default(false)
  totalPrints         Decimal         @default(0)
  totalPrintOrders    Decimal         @default(0)
  totalPurchases      Decimal         @default(0)
  totalPurchaseOrders Decimal         @default(0)
  Notification        Notification[]
  PrintOrder          PrintOrder[]
  ShoppingCart        ShoppingCart[]
  PurchaseOrder       PurchaseOrder[]

  @@map("users")
}

model PrintPrice {
  id     String  @id @default(cuid())
  length String  @unique
  price  Decimal
  Print  Print[]

  @@map("print_prices")
}

model Color {
  id    String  @id @default(cuid())
  color String  @unique
  Print Print[]

  @@map("colors")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@map("notifications")
}

enum PrintOrderStatus {
  WAITING
  IN_PRODUCTION
  DONE
}

model PrintOrder {
  id        String           @id @default(cuid())
  number    Decimal
  status    PrintOrderStatus @default(WAITING)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime         @default(now())
  Print     Print[]

  @@map("print_orders")
}

model Print {
  id           String     @id @default(cuid())
  imageName    String
  imageUrl     String     @unique
  key          String     @unique
  printPrice   PrintPrice @relation(fields: [printPriceId], references: [id])
  printPriceId String
  border       Boolean
  color        Color      @relation(fields: [colorId], references: [id])
  colorId      String
  quantity     Decimal
  printOrder   PrintOrder @relation(fields: [printOrderId], references: [id], onDelete: Cascade)
  printOrderId String

  @@map("prints")
}

model ProductCategory {
  id      String    @id @default(cuid())
  name    String
  Product Product[]

  @@map("product_categories")
}

model PaymentMethod {
  id            String          @id @default(cuid())
  name          String
  PurchaseOrder PurchaseOrder[]

  @@map("payment_methods")
}

model Product {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  rated                Decimal                @default(0)
  price                Decimal
  category             ProductCategory        @relation(fields: [productCategoryId], references: [id])
  imageName            String
  imageUrl             String                 @unique
  key                  String                 @unique
  productCategoryId    String
  ShoppingCartProduct  ShoppingCartProduct[]
  PurchaseOrderProduct PurchaseOrderProduct[]

  @@map("products")
}

model ShoppingCartProduct {
  id             String       @id @default(cuid())
  quantity       Decimal      @default(1)
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String
  shoppingCart   ShoppingCart @relation(fields: [shoppingCartId], references: [id], onDelete: Cascade)
  shoppingCartId String

  @@map("shopping_cart_products")
}

model ShoppingCart {
  id                  String                @id @default(cuid())
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String                @unique
  ShoppingCartProduct ShoppingCartProduct[]

  @@map("shopping_carts")
}

enum PurchaseOrderStatus {
  WAITING_PAYMENT
  IN_TRANSIT
  DONE
}

model PurchaseOrder {
  id                   String                 @id @default(cuid())
  number               Decimal
  status               PurchaseOrderStatus    @default(WAITING_PAYMENT)
  paymentMethod        PaymentMethod          @relation(fields: [paymentMethodId], references: [id])
  freight              Decimal
  discount             Decimal                @default(0)
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime               @default(now())
  userId               String
  paymentMethodId      String
  PurchaseOrderProduct PurchaseOrderProduct[]

  @@map("purchase_orders")
}

model PurchaseOrderProduct {
  id              String        @id @default(cuid())
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  quantity        Decimal       @default(1)
  productId       String
  purchaseOrderId String

  @@map("purchase_order_products")
}
